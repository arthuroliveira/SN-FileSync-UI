
'use strict';
var moment = require('moment');
var path = require('path');
var fs = require('graceful-fs');
var DataStore = require('nedb');
var config = {};
var DEMO_FILE = path.join(__dirname, 'file_sync.config.json');

function encodeCredentials(username, password) {
    var auth = new Buffer(username + ':' + password).toString('base64');
    return auth;
}

function decodeCredentials(auth) {
    var credentials = new Buffer(auth, 'base64').toString();
    var credentialsArray = credentials.split(':');
    return {
        username: credentialsArray[0],
        password: credentialsArray[1]
    };
}

function readDemoFile() {
    if (fs.existsSync(DEMO_FILE)) {
        return fs.readFileSync(DEMO_FILE, 'utf-8');
    } else {
        return JSON.stringify({
            instances: [],
            tables: []
        });
    }
}

function loadDemoData(configType) {
    var demoConfig = JSON.parse(readDemoFile());
    config[configType].insert(demoConfig[configType]);
}

function loadData(err) {
    if (err) {
        console.log(err);
    }
}

function reformatObject(currentObject) {
    var tempObject = {};
    for (var key in currentObject) {
        switch (key) {
            case 'auth':
                var decodedCreds = decodeCredentials(currentObject.auth);
                tempObject.username = decodedCreds.username;
                tempObject.password = decodedCreds.password;
                tempObject.auth = currentObject.auth;
                break;
            case 'last_synced':
                tempObject.last_synced = moment(currentObject.last_synced).format('YYYY-MM-DDTHH:mm:ss');
                break;
            case 'fields':
                tempObject.fields = [];
                for (var currentKey in currentObject.fields) {
                    tempObject.fields.push({
                        field_name: currentKey,
                        field_type: currentObject.fields[currentKey],
                    });
                }
                break;
            default:
                tempObject[key] = currentObject[key];
                break;
        }
    }
    return tempObject;
}

function getConfigFile() {
    var configPath = global.CONFIG_PATH;
    config.instances = new DataStore({
        filename: path.join(configPath, 'instances.db'),
        autoload: true,
        onload: loadData
    });
    config.tables = new DataStore({
        filename: path.join(configPath, 'tables.db'),
        autoload: true,
        onload: loadData
    });

    config.instances.count({}, function(err, count) {
        if (count === 0) {
            loadDemoData('instances');
        }
    });
    config.tables.count({}, function(err, count) {
        if (count === 0) {
            loadDemoData('tables');
        }
    });

    return config;
}

function updateConfig(configFile, configData, configID, callBack) {
    var configControl = config[configFile];
    if (!configID) {
        configControl.insert(configData, callBack);
    } else {
        configControl.update({
                _id: configID
            },
            configData, {
                upsert: true
            },
            callBack
        );
    }
}

function removeConfig(configFile, configID) {
    var configControl = config[configFile];
    configControl.remove({
        _id: configID
    });
}


module.exports = function() {
    this.config = getConfigFile();

    this.getConfig = function(configFile) {
        var currentConfigFile = this.config[configFile];
        currentConfigFile.persistence.compactDatafile();
        var tempConfig = currentConfigFile.getAllData();
        var returnConfig = [];
        for (var i = 0; i !== tempConfig.length; i++) {
            returnConfig.push(reformatObject(tempConfig[i]));
        }
        return returnConfig.sort(function(a, b) {
            return a.name.localeCompare(b.name);
        });
    };

    this.createInstance = function(pathName, instanceName, username, password, jsonVer, readOnly, lastSynced, instanceID, callBack) {
        if (instanceName.indexOf('https://') === -1) {
            instanceName = 'https://' + instanceName + '.service-now.com';
        }
        if (lastSynced) {
            if (lastSynced === 'updated') {
                lastSynced = moment().format('YYYY-MM-DD HH:mm:ss');
            } else {
                lastSynced = moment(lastSynced).format('YYYY-MM-DD HH:mm:ss');
            }
        }
        var folderName = path.basename(pathName);
        updateConfig(
            'instances', {
                'path': pathName,
                'name': folderName,
                'host': instanceName,
                'auth': encodeCredentials(username, password),
                'last_synced': lastSynced || '1969-12-31 23:59:59',
                'json': jsonVer || 'JSON',
                'read_only': readOnly || false
            },
            instanceID,
            callBack
        );
    };

    this.createTable = function(folderName, tableName, key, fields, tableID, callBack) {
        var fieldObject = {};
        for (var i = fields.length - 1; i >= 0; i--) {
            fieldObject[fields[i].field_name] = fields[i].field_type;
        }
        fieldObject = fields.length === 0 ? {
            'script': 'js'
        } : fieldObject;
        updateConfig(
            'tables', {
                'name': folderName,
                'table': tableName,
                'key': key || 'name',
                'fields': fieldObject
            },
            tableID,
            callBack
        );
    };

    this.removeInstance = function(instanceID) {
        removeConfig('instances', instanceID);
    };

    this.removeTables = function(tableID) {
        removeConfig('tables', tableID);
    };
    this.reformatConfigObject = function(currentObject) {
        return reformatObject(currentObject);
    };
};