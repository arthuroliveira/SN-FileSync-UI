'use strict';
var fs = require('graceful-fs');
var chokidar = require('chokidar');
var path = require('path');
var sync_logger = require('sync-logger');
var sn_sync = require('sn-sync');

var chokidarOptions = {
	'persistent':'true',
	'ignorePermissionErrors':'false',
	'ignoreInitial':'true',
	'interval':'100'
};

function getFileInfo( pathname ){
	var extension = path.extname( pathname );
	if(extension === '.json'){
		extension = '.settings.json';
	}
	var baseDirectory = path.dirname( pathname );
	return {
		fileName : path.basename( pathname, extension ),
		folderName : path.basename( baseDirectory ),
		instanceName : path.basename( path.dirname( baseDirectory ) ),
		extension : extension.substr( 1 ),
		data : fs.readFileSync( pathname, 'utf8')
	};
}

function addFile ( pathname ){
	try{
		var fileInfo = getFileInfo( pathname );
		fileInfo.action = 'insert';
        sn_sync.upsertRecord(fileInfo);
		sync_logger.logTitle( 'File Created' );
		sync_logger.logSuccess( path.basename(pathname) );
	}
	catch(err){
		sync_logger.logFailure(err);
	}
	global.ANGULAR.element('#general').scope().$apply();
}

function changeFile ( pathname ){
	try{
		var fileInfo = getFileInfo( pathname );
		fileInfo.action = 'update';
		sync_logger.logTitle( 'File Changed: ' + path.basename(pathname) );
		sn_sync.upsertRecord( fileInfo );
	}
	catch(err){
		sync_logger.logFailure(err);
	}
	global.ANGULAR.element('#general').scope().$apply();
}

function fileError( error ){
	sync_logger.logFailure( error );
}

module.exports = function( pathname ){
	sync_logger.logSuccess( 'Watcher Started: ' + pathname.toString());
	this.fileWatcher = chokidar.watch( pathname || './' , chokidarOptions );
	this.fileWatcher.on( 'add', addFile );
	this.fileWatcher.on( 'change', changeFile );
	this.fileWatcher.on( 'error' , fileError );

	this.closeMonitor = function(){
		sync_logger.logFailure( 'Watcher Stopped' );
		this.fileWatcher.close();
	};

	this.addPath = function( pathname ){
		this.fileWatcher.add( pathname );
		sync_logger.logSuccess( 'Watcher Started: ' + pathname );
	};

	this.removePath = function(pathname){
		this.fileWatcher.unwatch( pathname );
		sync_logger.logFailure( 'Watcher Stopped: ' + pathname );
	};
};

